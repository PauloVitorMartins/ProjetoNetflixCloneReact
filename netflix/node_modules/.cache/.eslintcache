[{"/home/paulin/ProjetoNetflixCloneReact/netflix/src/index.js":"1","/home/paulin/ProjetoNetflixCloneReact/netflix/src/App.js":"2","/home/paulin/ProjetoNetflixCloneReact/netflix/src/Tmdb.js":"3","/home/paulin/ProjetoNetflixCloneReact/netflix/src/components/MovieRow.jsx":"4","/home/paulin/ProjetoNetflixCloneReact/netflix/src/components/FeaturedMovie.jsx":"5","/home/paulin/ProjetoNetflixCloneReact/netflix/src/components/Header.js":"6"},{"size":232,"mtime":1664197458157,"results":"7","hashOfConfig":"8"},{"size":1876,"mtime":1664304838530,"results":"9","hashOfConfig":"8"},{"size":2450,"mtime":1664289134086,"results":"10","hashOfConfig":"8"},{"size":1585,"mtime":1664304468180,"results":"11","hashOfConfig":"8"},{"size":1466,"mtime":1664300569016,"results":"12","hashOfConfig":"8"},{"size":457,"mtime":1664301633992,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"z8ocvr",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"17"},"/home/paulin/ProjetoNetflixCloneReact/netflix/src/index.js",[],[],[],"/home/paulin/ProjetoNetflixCloneReact/netflix/src/App.js",["36"],[],"/home/paulin/ProjetoNetflixCloneReact/netflix/src/Tmdb.js",["37","38"],[],"const API_KEY = '19bd31a425a4b254c60f55f8586a53be';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\nconst fetchBasic = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await fetchBasic(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await fetchBasic(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em alta',\n                items: await fetchBasic(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await fetchBasic(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await fetchBasic(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await fetchBasic(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await fetchBasic(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await fetchBasic(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            }\n        ]\n    },\n    getMovieInfo: async (movieId, type) => {\n        let info = {};\n\n        if(movieId) {\n            switch(type) {\n                case \"movie\":\n                    info = await fetchBasic(`/movie/${movieId}?language=pt-Br&api_key=${API_KEY}`)\n                break;\n                case \"tv\":\n                    info = await fetchBasic(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\n                break;\n            }\n        }\n        return info;\n    }\n}","/home/paulin/ProjetoNetflixCloneReact/netflix/src/components/MovieRow.jsx",["39","40","41"],[],"/home/paulin/ProjetoNetflixCloneReact/netflix/src/components/FeaturedMovie.jsx",["42"],[],"import React from \"react\";\nimport \"./FeaturedMovie.css\";\n\nexport default ({ item }) => {\n\n    let firstDate = new Date(item.first_air_date);\n    let genres = [];\n    for(let i in item.genres) {\n        genres.push(item.genres[i].name)\n    }\n\n  return (\n    <section\n      className=\"featured\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\n      }}\n    >\n      <div className=\"featured--vertical\">\n        <div className=\"featured--horizontal\">\n          <div className=\"featured--name\">{item.original_name}</div>\n          <div className=\"featured--info\">\n            <div className=\"featured--points\">{Math.round(item.vote_average * 100)/100} pontos</div>\n            <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n            <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n          </div>\n          <div className=\"featured--description\">{item.overview}</div>\n          <div className=\"featured--buttons\">\n            <a className=\"watch--button\" href={`/watch/${item.id}`}>► Assistir</a>\n            <a className=\"myList--button\" href={`/list/add${item.id}`}>+ Minha Lista</a>\n          </div>\n          <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(' , ')}</div>\n        </div>\n      </div>\n    </section>\n  );\n};\n","/home/paulin/ProjetoNetflixCloneReact/netflix/src/components/Header.js",["43"],[],"import React from \"react\";\nimport \"./Header.css\";\n\nexport default ({black}) => {\n  return (\n    <header className={black ? 'black' : ''}>\n      <div className=\"header--logo\">\n        <a href=\"https://fontmeme.com/netflix-font/\">\n          <img\n            src=\"https://fontmeme.com/permalink/220927/bc05f5a4687b04f8d2447ad497fa3047.png\"\n            alt=\"netflix-font\"\n            border=\"0\"\n          ></img>\n        </a>\n      </div>\n    </header>\n  );\n};\n",{"ruleId":"44","severity":1,"message":"45","line":8,"column":1,"nodeType":"46","endLine":67,"endColumn":3},{"ruleId":"44","severity":1,"message":"47","line":10,"column":1,"nodeType":"46","endLine":70,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":59,"column":13,"nodeType":"50","messageId":"51","endLine":66,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":5,"column":10,"nodeType":"54","messageId":"55","endLine":5,"endColumn":15},{"ruleId":"44","severity":1,"message":"45","line":7,"column":1,"nodeType":"46","endLine":53,"endColumn":3},{"ruleId":"56","severity":1,"message":"57","line":44,"column":17,"nodeType":"58","endLine":46,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":4,"column":1,"nodeType":"46","endLine":39,"endColumn":3},{"ruleId":"44","severity":1,"message":"45","line":4,"column":1,"nodeType":"46","endLine":18,"endColumn":3},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'width' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]